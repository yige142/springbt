1  问题:pom引入mysql没有找到对应的版本
解决 可以按照IDE 给的https://repo.maven.apache.org/maven2/ 地址，在里面查到有就写对应的名字就可以，
列如pom 引入的mysql 5.1.26

2  问题：配置完druid 调试是否成功 调试 onnection conn=dataSource.getConnection(); 会报错
   原因，1 默认导入的mysql连接是8版本，且  driver-class-name: com.mysql.jdbc.Driver 路径李多
   了个 bc (com.mysql.bc.jdbc.Driver)
   解决：跟换本机mysql对应的连接版本，换成5.1.26 ，再吧yml配置文件李的 driver-class-name地址改对


3  问题 测试连接上druid能否从mysql里取数据    jdbcTemplate 取不到值
   解决 ： @Autowired DataSource dataSource; @Autowired JdbcTemplate jdbcTemplate;  把JdbcTemplate
   加上@Autowired标签，让其也加入spring容器，从而轻松调用


4  web开发 webjars 可以用maven引入js bootstrap等   网站 webjars.org

5  @RestController 中注入模板语法 html上面就解析不了，@Controller则解析正常 ??
   原因：使用@Controller修饰类，可以根据需要返回各种我们所需的数据（json,ModelAndView,静态页面），
   而使用RestController修饰类，最后返回结果都会被解析成json对象；另外控制器里需要加
   Model(import org.springframework.ui.Model;), public String tt(Model model){} 不加Model,页面
   thymeleaf语法不识别

6.1 项目打包默认是jar包怎么改成war包
   解决  <groupId>springbt</groupId>
           <artifactId>demo</artifactId>
           <version>0.0.1</version>
            位置下<!--改为war方式-->
           <packaging>war</packaging>


            <!--让maven打包项目是war包 引入war包插件（不写maven会默认再引一遍）-->
            <plugin>
                   <groupId>org.apache.maven.plugins</groupId>
                   <artifactId>maven-war-plugin</artifactId>
                   <version>2.6</version>
                   <configuration>
                       <failOnMissingWebXml>false</failOnMissingWebXml>
                   </configuration>
           </plugin>

           <!--war包命名-->
           <finalName>demo22</finalName>


           补充：
           <!-- 打成war的时候打开注释，本地开发用内嵌tomcat时加上注释（不知道换机器要不要开注释，本地打包是没有开注释的） -->
           <!--        <dependency>-->
           <!--            <groupId>org.springframework.boot</groupId>-->
           <!--            <artifactId>spring-boot-starter-tomcat</artifactId>-->
           <!--            <scope>provided</scope>-->
           <!--        </dependency>-->


6  打成war包部署到Tomcat访问竟然404
   解决：在springbt 目录下重写启动类，然后看tomcat日志启动有spring字样则启动成功
     @SpringBootApplication
       public class Application extends SpringBootServletInitializer {
           @Override
           protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
               return application.sources(Application.class);
           }

           public static void main(String[] args) {
               SpringApplication.run(Application.class, args);
           }
       }

